장고

장고프로젝트 생성하기
django-admin startproject myproject . (여기서 .은 현재폴더를 가리키고 myproject라는 이름의 장고프로젝트를 생성)

urls.py - 경로 설정(라우팅)

Web Server(Static)
apache,nginx,IIS
빠르다

 <-> 

Web Application Server(Dynamic)
django,flask,php,jsp,ROL
느리다, 유지/보수의 장점

Create
Read
Update
Delete

GET // POST

GET : 클라이언트의 데이터를 URL 뒤에 ?이 붙으며 전송 (ex:네이버 검색)
POST : Body에 데이터를 숨겨서 전송 (ex:네이버 로그인)

GET이 POST보다 빠르지만 url 뒤에 데이터가 붙다보니 길이에 제한이 있고 데이터가 노출되어 비보안적이다.

장고의 DB는 model로 관리

쿼리문 : DB의 테이블을 생성, 수정, 삭제 or  테이블 데이터의 내용을 생성, 수정, 삭제 시 사용하는 DB 질의(문법)이다.

장고의 ORM은 DB의 테이블을 모델화하여 사용
ORM이 쿼리문을 자동으로 생성하여 통일성 보장, 그리고 쿼리문 자체를 잘못 작성할 가능성도 사라진다.
또한 DB에 맞게 자동으로 쿼리문을 생성해 주므로 쿼리문 수정 작업이 사라진다.

장고에서 데이터베이스를 여러 개 사용할 때
config/settings.py에서 default에 추가 등록해 사용할 수 있다.

SQLite = 임시DB

>python manage.py migrate를 입력하여 앱이 필요로 하는 테이블 생성

대부분의 모델은 클래스로 만든다.

어떤 모델이 다른 모델을 속성으로 가지면 ForeignKey를 이용(ForeignKey는 쉽게 말해 다른 모델과의 연결을 의미)

settings.py파일의 INSTALLED_APPS 항목에 추가되지 않으면 장고는 앱을 인식하지 못하고 데이터베이스 관련 작업도 할 수 없다.
즉, 장고에서 모델(DB)을 이용하려면 반드시 앱등록을 해야한다.

>python manage.py makemigrations를 입력하여 테이블 작업을 수행하기 위한 파일들을 업로드

실제 테이블 생성명령은
>python manage.py migrate

>python manage.py shell //장고 셸 실행
>>>from pybo.models import Question, Answer //Question,Answer 모델 임포트    
>>> from django.utils import timezone //timezone 임포트
>>> q = Question(subject='pybo가 무엇인가요?', content='pybo에 대해서 알고 싶습니다.', create_date=timezone.now()) //Question모델 데이터 만들기
>>> q.save() //데이터베이스에 저장

>>>Question.objects.all() //Question모델 데이터 모두 조회

Question모델에 __str__ 메서드를 추가하면 조회시 속성값이 나온다.

makemigrations, migrate 명령은 모델의 속성이 추가되거나 변경된 경우 실행해야 한다.(단, 메서드 추가는 생략)

>>>Question.objects.filter(id=1) //id값이 1인 Question모델 데이터 조회(리스트 형태)
>>>Question.objects.get(id=1) //id값이 1인 Question모델 데이터 조회(filter와의 차이점은 반환값 형태 get은 단 한 건의 데이터를 반환)

>>>Question.objects.filter(subject__contains='장고') //제목의 일부를 이용하여 데이터 조회

#데이터 수정
>>>q=Question.objects.get(id=2) //id값이 2인 Question 모델 데이터를 q에 매개변수 지정
>>>q.subject='Django Model Question'
>>>q.save()

#데이터 삭제
>>>q=Question.objects.get(id=1)
>>>q.delete()

#연결된 데이터로 조회하기
연결모델명_set을 사용
>>>q.answer_set.all()

장고 Admin
>python manage.py createsuperuser //슈퍼 유저 생성

장고 Admin에서 모델 관리
/pybo/admin.py
from .models import Question

class QuestionAdmin(admin.ModelAdmin):
    search_field = ['subject']		//장고 Admin에 데이터 검색 기능 추가
admin.site.register(Question, QuestionAdmin)

order_by 함수는 조회한 데이터를 특정 속성으로 정렬
Question.objects.order_by('-create_date') //작성일시의 역순으로 정렬

render함수를 사용하여 모델 데이터를 템플릿 파일을 사용하여 화면에 출력

템플릿 : 장고의 태그를 추가로 사용할 수 있는 HTML 파일

>mkdir templates //프로젝트 디렉터리에 템플릿을 모아 저장할 디렉터리 만들기

#템플릿 디렉터리 위치 settings.py에 등록하기

TEMPLATES = [
	{
	'DIRS': [BASE_DIR / 'templates'],
  }
]

템플릿 태그 {% 와 %}로 둘러쌓인 문장

#오류 화면 구현하기
실제 서비스시 DEBUG 항목을 False로 설정

@URL 별칭지정
urls.py에서 name='별칭' 추가
    path('', views.index, name='index'),
    path('<int:question_id>/', views.detail, name='detail'),

별칭이 겹치지 않으려면 네임스페이스를 추가해줘야한다.

{% csrf_token %}를 보안상 <form>태그 밑에 넣기(장고의 기본 기능)

장고에서 정적(static)파일
이미지(.png, .jpg), 자바스크립트(.js), 스타일시트(.css)
settings.py에 static 경로를 지정해주고
static폴더를 만들고 css파일을 만든다.
적용하려는 html파일위에
{% load static %}
<link rel="stylesheet" type="text/css" href="{% static 'style.css' %}"> 로 연동

#form
장고 폼은 2개의 폼으로 구분
forms.Form	//폼
forms.ModelForm	//모델 폼 : 모델과 연결된 폼

장고 모델 폼은 내부 클래스로 Meta 클래스를 반드시 가져야 하며, Meta 클래스에는 모델 폼이 사용할 모델과 모델의 필드들을 적어야 한다.

form.is_valid 함수는 POST 요청으로 받은 form이 유효한지 검사한다.

#네비게이션바
base.html - 모든 화면에 상속

html 파일은 분리하고 include로 관리해야 유지,보수에 유리하다.

#페이징
Paginator 클래스 사용

#템플릿 필터
템플릿 태그에서 | 문자 뒤에 사용하는 필터

#게시물 일련번호 공식 만들기
일련번호 = 전체 게시물 개수 - 시작 인덱스 - 현재 인덱스 + 1

@load문은 반드시 extends문 다음에 위치해야 한다.

#로그인,로그아웃 구현
django.contrib.auth 앱을 이용

하지만 로그인,로그아웃을 독립적인 앱으로 종속시키는것은 좋지 않다.
그래서 '공통 기능을 가진 앱'이라는 의미의 common 앱에 구현할 것이다.
django-admin startapp common

앱을 생성하면
첫번째로 config/setting.py에 앱을 등록해야한다.

authenticate() - 자동 로그인 함수

on_delete=modles.CASCADE - 삭제시 연결된 모델 데이터를 모두 삭제

필드에 null을 허용하려면 null=True를 지정
ex)author = models.ForeignKey(User, on_delete=models.CASCADE, null=True)

로그인이 필요한 함수에 @login_required 애너테이션 적용

null=True,blank=True는 어떤 조건으로든 값을 비워둘 수 있음

오류를 임의로 발생시키고 싶으면 messages 모듈을 사용(넌필드 오류)

데이터 저장 시 form 엘리먼트에 action 속성이 없으면 현재의 페이지로 폼을 전송한다.

instance 매개변수에 question을 지정하면 기존 값을 폼에 채울 수 있다.

$(document).ready(function())은 화면이 로드된 다음 자동으로 호출되는 제이쿼리 함수이다.

comment 댓글을 작게 보여주는 클래스(CSS를 별도로 작성해야 한다)

장고 기능 개발 패턴 정리
1. 화면에 버튼 등 기능 추가하기
2. urls.py 파일에 기능에 해당하는 URL 매핑 추가하기
3. forms.py 파일에 폼 작성하기
4. views.py 파일에 URL 매핑에 추가한 함수 작성하기
5. 함수에서 사용할 템플릿 작성하기

@유지보수에 유리하도록 views.py 파일을 분리
views 디렉터리를 만들어 기능별로 OO_views.py 파일을 분리(import의 유의)
pybo/urls.py 수정(import의 유의)
주석을 이용해 알기 쉽게 분류
config/urls.py 수정(import 유의)

@ManyToManyField는 중복을 허락하지 않는다.

스크롤 초기화는 앵커 엘리먼트를 추가

검색,정렬 기능
Q 함수
OR 조건으로 데이터를 조회하는 장고의 함수

1개의 글에 여러 개의 답변이 있을 때 답변자 중복을 처리하기 위해 distinct 함수를 반드시 사용
게시판을 조회하는 목록 함수는 GET방식을 사용해야한다.

fiter 함수에서 모델 필드에 접근하려면 __를 이용
__contains 대신 __icontains를 사용할경우 대소문자를 가리지 않고 찾아준다.

order_by 함수에 두 개 이상의 인자가 전달되는 경우 1번째 항목부터 우선순위를 매긴다.